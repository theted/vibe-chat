name: Deploy to ECS

on:
  workflow_dispatch:

jobs:
  deploy-frontend:
    runs-on: ubuntu-latest
    env:
      AWS_REGION: ${{ secrets.AWS_REGION }}
      FRONTEND_S3_BUCKET: ${{ secrets.FRONTEND_S3_BUCKET }}
      SERVER_URL: ${{ secrets.SERVER_URL }}
      CLOUDFRONT_DISTRIBUTION_ID: ${{ secrets.CLOUDFRONT_DISTRIBUTION_ID }}
    defaults:
      run:
        working-directory: ai-chat-realtime/packages/client
    steps:
      - name: Check out repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Install frontend dependencies
        run: npm install

      - name: Build frontend
        run: npm run build
        env:
          VITE_SERVER_URL: ${{ env.SERVER_URL }}

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Sync assets to S3
        run: aws s3 sync dist "s3://${{ env.FRONTEND_S3_BUCKET }}" --delete

      - name: Invalidate CloudFront cache
        if: env.CLOUDFRONT_DISTRIBUTION_ID != ''
        run: |
          aws cloudfront create-invalidation \
            --distribution-id "$CLOUDFRONT_DISTRIBUTION_ID" \
            --paths "/*"

  build-and-deploy:
    needs: deploy-frontend
    runs-on: ubuntu-latest
    env:
      AWS_REGION: ${{ secrets.AWS_REGION }}
      ECR_REGISTRY: ${{ secrets.ECR_REGISTRY }}
      ECR_REPOSITORY: vibe-chat
      IMAGE_TAG: ${{ github.sha }}
      OPENAI_API_KEY_SECRET_ARN: ${{ secrets.OPENAI_API_KEY_SECRET_ARN }}
      ANTHROPIC_API_KEY_SECRET_ARN: ${{ secrets.ANTHROPIC_API_KEY_SECRET_ARN }}
      GROK_API_KEY_SECRET_ARN: ${{ secrets.GROK_API_KEY_SECRET_ARN }}
      GOOGLE_AI_API_KEY_SECRET_ARN: ${{ secrets.GOOGLE_AI_API_KEY_SECRET_ARN }}
      MISTRAL_API_KEY_SECRET_ARN: ${{ secrets.MISTRAL_API_KEY_SECRET_ARN }}
      COHERE_API_KEY_SECRET_ARN: ${{ secrets.COHERE_API_KEY_SECRET_ARN }}
      DEEPSEEK_API_KEY_SECRET_ARN: ${{ secrets.DEEPSEEK_API_KEY_SECRET_ARN }}
      QWEN_API_KEY_SECRET_ARN: ${{ secrets.QWEN_API_KEY_SECRET_ARN }}
      KIMI_API_KEY_SECRET_ARN: ${{ secrets.KIMI_API_KEY_SECRET_ARN }}
      Z_API_KEY_SECRET_ARN: ${{ secrets.Z_API_KEY_SECRET_ARN }}
      LLAMA_API_KEY_SECRET_ARN: ${{ secrets.LLAMA_API_KEY_SECRET_ARN }}
      PERPLEXITY_API_KEY_SECRET_ARN: ${{ secrets.PERPLEXITY_API_KEY_SECRET_ARN }}
      ECS_EXECUTION_ROLE_ARN: ${{ secrets.ECS_EXECUTION_ROLE_ARN }}
      ECS_TASK_ROLE_ARN: ${{ secrets.ECS_TASK_ROLE_ARN }}
      CLIENT_URL: ${{ secrets.CLIENT_URL }}
    defaults:
      run:
        working-directory: ai-chat-realtime
    steps:
      - name: Check out repository
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Log in to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build Docker image
        run: |
          docker build \
            -t "$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" \
            -t "$ECR_REGISTRY/$ECR_REPOSITORY:latest" \
            -f packages/server/Dockerfile \
            .

      - name: Push Docker image to Amazon ECR
        run: |
          docker push "$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"
          docker push "$ECR_REGISTRY/$ECR_REPOSITORY:latest"

      - name: Render ECS task definition
        run: |
          sed -e "s|IMAGE_URI|$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG|g" \
              -e "s|AWS_REGION_PLACEHOLDER|$AWS_REGION|g" \
              -e "s|EXECUTION_ROLE_ARN_PLACEHOLDER|$ECS_EXECUTION_ROLE_ARN|g" \
              -e "s|TASK_ROLE_ARN_PLACEHOLDER|$ECS_TASK_ROLE_ARN|g" \
              -e "s|__OPENAI_API_KEY_SECRET_ARN__|$OPENAI_API_KEY_SECRET_ARN|g" \
              -e "s|__ANTHROPIC_API_KEY_SECRET_ARN__|$ANTHROPIC_API_KEY_SECRET_ARN|g" \
              -e "s|__GROK_API_KEY_SECRET_ARN__|$GROK_API_KEY_SECRET_ARN|g" \
              -e "s|__GOOGLE_AI_API_KEY_SECRET_ARN__|$GOOGLE_AI_API_KEY_SECRET_ARN|g" \
              -e "s|__MISTRAL_API_KEY_SECRET_ARN__|$MISTRAL_API_KEY_SECRET_ARN|g" \
              -e "s|__COHERE_API_KEY_SECRET_ARN__|$COHERE_API_KEY_SECRET_ARN|g" \
              -e "s|__DEEPSEEK_API_KEY_SECRET_ARN__|$DEEPSEEK_API_KEY_SECRET_ARN|g" \
              -e "s|__QWEN_API_KEY_SECRET_ARN__|$QWEN_API_KEY_SECRET_ARN|g" \
              -e "s|__KIMI_API_KEY_SECRET_ARN__|$KIMI_API_KEY_SECRET_ARN|g" \
              -e "s|__Z_API_KEY_SECRET_ARN__|$Z_API_KEY_SECRET_ARN|g" \
              -e "s|__LLAMA_API_KEY_SECRET_ARN__|$LLAMA_API_KEY_SECRET_ARN|g" \
              -e "s|__PERPLEXITY_API_KEY_SECRET_ARN__|$PERPLEXITY_API_KEY_SECRET_ARN|g" \
              -e "s|__CLIENT_URL__|$CLIENT_URL|g" \
            ecs-taskdef.json > taskdef.json

      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v2
        with:
          task-definition: ai-chat-realtime/taskdef.json
          service: vibe-chat-service
          cluster: vibe-chat-cluster
          wait-for-service-stability: true
